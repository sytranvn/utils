#!/usr/bin/env python3

######################################################
#
# FOR DEVELOPMENT ONLY
#
######################################################

from subprocess import call, check_output
import sqlite3
import argparse
import os
import configparser

DEFAULT_USER = os.environ.get('USER')
DIR = os.path.dirname(os.path.realpath(__file__))
DB  = os.path.join(DIR, "tunnel.db")
INI = os.path.join(DIR, "config.ini")
COMSH = os.path.join(DIR, "tunnel-complete.sh")
INSERT_QUERY = "INSERT INTO tunnel (user, name, host, port, local_port, gateway, is_active) " \
               "VALUES (:user, :name, :host, :port, :local_port, :gateway, :is_active);"
GREEN = '\x1b[32m'
RED = '\x1b[31m'
RESET_ALL = '\x1b[0m'

def db():
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    conn.set_trace_callback(None)
    return conn, c

def in_use(port):
    return not call(["nc", "-z", "localhost", str(port)])

def init(file=None, **kwargs):
    conn, c = db()
    ini = file or INI
    cfg = configparser.ConfigParser()
    cfg.read_file(open(ini))
    conns = [dict(name=name, user=None, **cf) for name, cf in cfg.items() if cf]

    print("Initializing database.")
    c.execute("""CREATE TABLE IF NOT EXISTS tunnel (
        name varchar(20) primary key,
        user varchar(255),
        host varchar(255),
        port int,
        local_port int,
        gateway varchar(255),
        is_active boolean default 0
    )""")
    try:
        c.executemany(INSERT_QUERY, conns)
        conn.commit()
        print("Initialized database successfully.")
    except Exception:
        raise
    finally:
        conn.close()

def add(**kwargs):
    c, conn = db()
    c.execute(INSERT_QUERY, dict(is_active=False, **kwargs))
    c.commit()
    conn.close()

def ls(status, **kwargs):
    conn, c = db()
    cons = ["1"]
    if status != "all":
        cons.append("is_active={}".format(1 if status == "up" else 0))

    c.execute("SELECT name, local_port, is_active FROM tunnel WHERE {cons} ORDER BY is_active DESC".format(
        cons=" AND ".join(cons)))

    for row in c.fetchall():
        print("{0}:{1} {a}{END}".format(*row, a=GREEN + "✔️ " if row[2] else RED + "❌ ", END=RESET_ALL))

def edit(name=None, **kwargs):
    conn, c = db()
    if not name:
        return
    new_values = []
    for k in kwargs:
        if kwargs[k] is not None:
            new_values += ["{k} = :{k}".format(k=k)]
    if new_values:
        q = "UPDATE tunnel SET {new_values} WHERE name = :name".format(
                new_values=",".join(new_values))
        conn.execute(q, dict(kwargs, name=name[0]))
        conn.commit()
        conn.close()

def tunnel(names, **kwargs):
    conn, c = db()

    for name in names:
        c.execute("""
            SELECT user, name, host, port, local_port, gateway, is_active 
            FROM tunnel WHERE name = ?
        """, (name,))
        user, name, host, port, local_port, gateway, is_active = c.fetchone()

        if in_use(local_port):
            raise Exception("Address already in use")

        if not is_active:
            print("Activate tunnel {}".format(name))
            if 0 == call(["ssh", "-f", "{}@{}".format(user or DEFAULT_USER, gateway), "-N",
                     "-L", "{local_port}:{host}:{port}".format(
                       gateway=gateway,
                       local_port=local_port,
                       host=host,
                       port=port)
                     ]):
                edit(name=[name], is_active=True)
                print("Activated.")
            else:
                conn.close()
                raise Exception("Tunnel failed")
        else:
            print("Tunnel already enabled")

    conn.close()

def distun(names, force, **kwargs):
    conn, c = db()
    e = None
    for name in names:
        try:
            c.execute("SELECT local_port, is_active FROM tunnel WHERE name=?", (name,))
            t = c.fetchone()
            local_port, is_active = t if t else (None,None)

            if not is_active and not force:
                raise Exception("Tunnel '{}' not exist or disabled".format(name))

            edit(name=[name], is_active=False)

            if not in_use(local_port):
                raise Exception("Address not in use")

            pid = check_output(["lsof", "-t", "-sTCP:LISTEN","-i4tcp:{}".format(local_port)]).strip()
            if 0 == call(["kill", pid]):
                print("Disconnected from {}".format(name))
        except Exception as ex:
            if not force:
                e = ex
                break

    conn.close()

    if e:
        raise e

def complete(*args, **kwargs):
    f = open(COMSH, 'r')
    print(f.read())
    f.close()

# Handle args
parser = argparse.ArgumentParser(description="Tunnel manager", prog="tunnel")
subparsers = parser.add_subparsers(metavar="Commands", help="")

parser_configs = (
    (("init", dict(help="Set up default settings")),
     init,
     [("-f", "--file", dict(nargs=1, help="configuration file (default=./config.ini)"))]),
    (("add", dict(help="Add tunnel configurations")),
     add,
     [("name", dict(help="Name")),
      ("-u", "--user", dict(required=False, help="User")),
      ("-H", "--host", dict(required=True, help="Host")),
      ("-p", "--port", dict(required=True, help="Port")),
      ("-l", "--local_port", dict(required=True, help="Local port")),
      ("-g", "--gateway", dict(required=True, help="Gateway"))]),
    (("edit", dict(help="Edit tunnel configurations")),
     edit,
     [("name", dict(help="Name")),
      ("-u", "--user", dict(required=False, help="User")),
      ("-H", "--host", dict(required=False, help="Host")),
      ("-p", "--port", dict(required=False, help="Port")),
      ("-l", "--local_port", dict(required=False, help="Local port")),
      ("-g", "--gateway", dict(required=False, help="Gateway"))]),
    (("ls", dict(help="List tunnels")),
     ls,
     [("-s", "--status", dict(help="tunnel names", choices=["up", "down", "all"], required=False, default="all"))]),
    (("up", dict(help="Activate tunnels")),
     tunnel,
     [("names", dict(nargs='+', help="tunnel names"))]),
    (("down", dict(help="Disconnect tunnels")),
     distun,
     [("names", dict(nargs='+', help="tunnel names")),
      ("-f", "--force", dict(required=False, action="store_true", help="Force close"))]),
    (("complete", dict(help="Print bash completion script")), complete, None),
)

for config in parser_configs:
    *str_arg, dict_arg = config[0]
    subparser = subparsers.add_parser(*str_arg, **dict_arg)

    if config[2]:
        for *str_arg, dict_arg in config[2]:
            subparser.add_argument(*str_arg, **dict_arg)

    subparser.set_defaults(function=config[1])


args = parser.parse_args()
# End Handle args

if __name__ == "__main__":
    try:
        function = getattr(args, 'function', None)
        if not function:
            parser.print_help()
            exit(1)
        else:
            true_args = vars(args)
            true_args.pop('function')
            function(**true_args)
    except Exception as e:
        print("Error: {}".format(e))
        exit(1)

    exit(0)


# vim:ts=4:sw=4:sts=4
